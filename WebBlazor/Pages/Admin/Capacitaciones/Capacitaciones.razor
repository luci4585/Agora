@page "/Capacitaciones"
@inject SweetAlertService _sweetAlertService
@inject IGenericService<Capacitacion> _serviceCapacitacion

<PageTitle>Capacitaciones</PageTitle>

<PageHeader Title="Capacitaciones" Description="Administrar aquí las capacitaciones" />

@if(capacitaciones == null)
{
    <p><em>Cargando...</em></p>
}
else if(!capacitaciones.Any())
{
    <p><em>No hay capacitaciones disponibles.</em></p>
}
else
{
    <NavLink class="btn btn-info" href=@($"NuevoEditarCapacitacion?idCapacitacion")>
        Agregar nueva capacitación
    </NavLink>
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Orador/a</th>
                <th>Fecha</th>
                <th colspan="2">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var capacitacion in capacitaciones)
            {
                <tr>
                    <td>@capacitacion.Nombre</td> 
                    <td>@capacitacion.Ponente</td>
                    <td>@capacitacion.FechaHora</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteCapacitacion(capacitacion)">Eliminar</button>
                    </td>
                    <NavLink class="btn btn-info" href=@($"NuevoEditarCapacitacion?idCapacitacion={capacitacion.Id}")>
                        Editar
                    </NavLink>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Capacitacion>? capacitaciones;

    protected override async Task OnInitializedAsync() 
    {
        capacitaciones = (await _serviceCapacitacion.GetAllAsync(null))?.ToList();
    }
    private async Task DeleteCapacitacion(Capacitacion capacitacion)
    {
        var respuesta = await _sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "¿Estás seguro?",
            Text = $"¿Deseas eliminar la capacitación '{capacitacion.Nombre}'?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí, eliminar",
            CancelButtonText = "Cancelar"
        });
        if (respuesta.IsConfirmed)
        {
            if (await _serviceCapacitacion.DeleteAsync(capacitacion.Id))
            {
                capacitaciones?.Remove(capacitacion);
                StateHasChanged();
            }
            else 
            {
                await _sweetAlertService.FireAsync("Error", "No se pudo eliminar la capacitación.", SweetAlertIcon.Error);
            }
        }
    }
}
