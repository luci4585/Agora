@page "/"

@inject ICapacitacionService _capacitacionService

<PageTitle>Inicio</PageTitle>

<PageHeader Title="Ágora" Description="Plataforma de Gestión de Capacitaciones"/>

<h4>Ágora es un proyecto educativo desarrollado junto a estudiantes de 2.º año de Programación. Su objetivo es brindar 
    una plataforma integral para gestionar capacitaciones de una institución educativa: desde la publicación y la inscripción 
    (online/presencial), hasta la acreditación, cobros y emisión de certificados.</h4>

    @if(capacitacionesAbiertas is null || capacitacionesFuturas is null)
    {
        <p><em>Cargando capacitaciones abiertas y futuras...</em></p>
    }
    else
    {
        @if (!capacitacionesAbiertas.Any())
        {
            <p>No hay capacitaciones abiertas en este momento.</p>
        }
        else
        {
            <h3>Capacitaciones Abiertas</h3>
            <div class="row row-cols-1 row-cols-md-2 g-4">
                @foreach (var capacitacion in capacitacionesAbiertas)
                {
                    <div class="col">
                        <CardCapacitacion Capacitacion="capacitacion" />
                    </div>
                }
            </div>
        }

        @if (!capacitacionesFuturas.Any())
        {
            <p>No hay capacitaciones próximas programadas en este momento.</p>
        }
        else
        {
            <h3>Capacitaciones Próximas</h3>
            <div class="row row-cols-1 row-cols-md-2 g-4">
                @foreach (var capacitacion in capacitacionesFuturas)
                {
                    <div class="col">
                        <CardCapacitacion Capacitacion="capacitacion" />
                    </div>
                }
            </div>
        }
    }



@code {
    private List<Capacitacion>? capacitacionesAbiertas;
    private List<Capacitacion>? capacitacionesFuturas;

    protected override async Task OnInitializedAsync()
    {
        //Carrgar capacitaciones abiertas y futuras en forma simultánea con Task.WhenAll
        var capacitacionesAbiertasTask = _capacitacionService.GetCapacitacionesAbiertasAsync();
        var capacitacionesFuturasTask = _capacitacionService.GetCapacitacionesFuturasAsync();
        await Task.WhenAll(capacitacionesAbiertasTask, capacitacionesFuturasTask);
        capacitacionesAbiertas = await capacitacionesAbiertasTask;
        capacitacionesFuturas = await capacitacionesFuturasTask;
    }
}